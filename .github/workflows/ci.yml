name: CI

on: [push, pull_request]

jobs:
  build_x64_executables:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: actions/setup-node@v1
      with:
        node-version: '14'
    - run: npm ci
    - run: npm run build-x64
    - name: Tar for preserving executable permissions
      run: tar cvf dist.tar ./dist/
    - uses: actions/upload-artifact@v2
      with:
        name: build_x64
        path: dist.tar

  build_arm64_executables:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - run: |
        set -xeu
        docker run --rm -v $PWD:/app arm64v8/node:14 bash << EOF
        set -xeu
        cd /app
        npm ci
        npm run piping-build
        ./node_modules/.bin/pkg --out-path=dist --targets=node14-linux-arm64,node14-mac-arm64,node14-alpine-arm64,node14-win-arm64 piping-server
        EOF
        ls dist
    - name: Tar for preserving executable permissions
      run: tar cvf dist.tar ./dist/
    - uses: actions/upload-artifact@v2
      with:
        name: build_arm64
        path: dist.tar

  linux_operational_test:
    runs-on: ubuntu-18.04
    needs: build_x64_executables
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: build_x64
        path: .
    - name: Unarchive dist.tar
      run: tar xvf dist.tar
    - name: Operational test
      run: |
        set -xeu
        # Run a server in background
        ./dist/piping-server-linux-x64 --http-port=8080 &> ./piping-server.log &
        # Get server PID
        server_pid=$!
        # Wait for server running
        sleep 1
        # Create a file to send
        echo 'hello, world' > /tmp/hello.txt
        # Send and wait for a receiver
        curl -T /tmp/hello.txt localhost:8080/mypath &
        # Get data as a file
        curl localhost:8080/mypath > /tmp/download.txt
        # Print downloaded file
        cat  /tmp/download.txt
        # Test the equality
        diff /tmp/hello.txt /tmp/download.txt

        # Print server's log
        cat ./piping-server.log

        # Stop the server
        kill $server_pid

  alpine_operational_test:
    runs-on: ubuntu-18.04
    needs: build_x64_executables
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: build_x64
        path: .
    - name: Unarchive dist.tar
      run: tar xvf dist.tar
    - name: Operational test
      run: |
        docker run --rm -i -v $PWD/dist:/dist alpine:3.14 /bin/sh << EOF
        set -xeu
        apk add curl

        # Run a server in background
        ./dist/piping-server-alpine-x64 --http-port=8080 &> ./piping-server.log &
        # Wait for server running
        sleep 1
        # Create a file to send
        echo 'hello, world' > /tmp/hello.txt
        # Send and wait for a receiver
        curl -T /tmp/hello.txt localhost:8080/mypath &
        # Get data as a file
        curl localhost:8080/mypath > /tmp/download.txt
        # Print downloaded file
        cat  /tmp/download.txt
        # Test the equality
        diff /tmp/hello.txt /tmp/download.txt

        # Print server's log
        cat ./piping-server.log
        EOF

  macos_operational_test:
    runs-on: macos-10.15
    needs: build_x64_executables
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: build_x64
        path: .
    - name: Unarchive dist.tar
      run: tar xvf dist.tar
    - name: Operational test
      run: |
        set -xeu
        # Run a server in background
        ./dist/piping-server-macos-x64 --http-port=8080 &> ./piping-server.log &
        # Get server PID
        server_pid=$!
        # Wait for server running
        sleep 1
        # Create a file to send
        echo 'hello, world' > /tmp/hello.txt
        # Send and wait for a receiver
        curl -T /tmp/hello.txt localhost:8080/mypath &
        # Get data as a file
        curl localhost:8080/mypath > /tmp/download.txt
        # Print downloaded file
        cat  /tmp/download.txt
        # Test the equality
        diff /tmp/hello.txt /tmp/download.txt

        # Print server's log
        cat ./piping-server.log

        # Stop the server
        kill $server_pid

  windows_operational_test:
    runs-on: windows-2019
    needs: build_x64_executables
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: build_x64
        path: .
    - name: Unarchive dist.tar
      run: tar xvf dist.tar
    - name: Create certificates
      run: |
        mkdir ssl_certs
        cd ssl_certs
        openssl genrsa 2048 > server.key
        openssl req -new -key server.key -subj "/C=JP" > server.csr
        cat server.csr | openssl x509 -req -days 3650 -signkey server.key > server.crt
    - name: Operational test
      run: |
        # Run a server in background
        $args = @("--http-port=8080", "--enable-https", "--https-port=8443", "--key-path=.\ssl_certs\server.key", "--crt-path=.\ssl_certs\server.crt")
        $server_pid = Start-Process -PassThru -FilePath .\dist\piping-server-win-x64.exe -ArgumentList $args | foreach { $_.Id }
        # Wait for server running
        sleep 1
        # Create a file to send
        echo 'hello, world' > C:\Temp\hello.txt
        
        # Send and wait for a receiver
        curl -T C:\Temp\hello.txt localhost:8080/mypath &
        # Get data as a file
        curl localhost:8080/mypath > C:\Temp\download.txt
        # Print downloaded file
        cat  C:\Temp\download.txt
        # Test the equality
        diff C:\Temp\hello.txt C:\Temp\download.txt

        # Send and wait for a receiver
        curl -kT C:\Temp\hello.txt https://localhost:8443/mypath &
        # Get data as a file
        curl -k https://localhost:8443/mypath > C:\Temp\download_https.txt
        # Print downloaded file
        cat  C:\Temp\download_https.txt
        # Test the equality
        diff C:\Temp\hello.txt C:\Temp\download_https.txt

        # Stop the server
        kill $server_pid

  release_executables:
    if: startsWith( github.ref, 'refs/tags/')
    needs:
      - linux_operational_test
      - alpine_operational_test
      - macos_operational_test
      - windows_operational_test
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build_x64
          path: .
      - name: Unarchive dist.tar
        run: tar xvf dist.tar
      - run: |
          set -xeu
          TAG=$(echo $GITHUB_REF | cut -d / -f 3)
          VERSION=$TAG
          REPO=$(echo $GITHUB_REPOSITORY | cut -d / -f 2)
          curl -L https://github.com/tcnksm/ghr/releases/download/v0.14.0/ghr_v0.14.0_linux_amd64.tar.gz | tar xzf -
          ./ghr_v0.14.0_linux_amd64/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${GITHUB_ACTOR} -r ${REPO} -c ${GITHUB_SHA} -delete ${VERSION} ./dist
